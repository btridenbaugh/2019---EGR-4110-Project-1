//
//  AppDelegate.swift
//  Ridenbaugh_HW1
//
//  Created by Benjamin Ridenbaugh on 9/24/19.
//  Copyright © 2019 Benjamin Ridenbaugh. All rights reserved.
//

import UIKit

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {



    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        // Override point for customization after application launch.
        return true
    }

    // MARK: UISceneSession Lifecycle

    func application(_ application: UIApplication, configurationForConnecting connectingSceneSession: UISceneSession, options: UIScene.ConnectionOptions) -> UISceneConfiguration {
        // Called when a new scene session is being created.
        // Use this method to select a configuration to create the new scene with.
        return UISceneConfiguration(name: "Default Configuration", sessionRole: connectingSceneSession.role)
    }

    func application(_ application: UIApplication, didDiscardSceneSessions sceneSessions: Set<UISceneSession>) {
        // Called when the user discards a scene session.
        // If any sessions were discarded while the application was not running, this will be called shortly after application:didFinishLaunchingWithOptions.
        // Use this method to release any resources that were specific to the discarded scenes, as they will not return.
    }


}


//
//  SceneDelegate.swift
//  Ridenbaugh_HW1
//
//  Created by Benjamin Ridenbaugh on 9/24/19.
//  Copyright © 2019 Benjamin Ridenbaugh. All rights reserved.
//

import UIKit

class SceneDelegate: UIResponder, UIWindowSceneDelegate {

    var window: UIWindow?


    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {
        // Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.
        // If using a storyboard, the `window` property will automatically be initialized and attached to the scene.
        // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).
        guard let _ = (scene as? UIWindowScene) else { return }
    }

    func sceneDidDisconnect(_ scene: UIScene) {
        // Called as the scene is being released by the system.
        // This occurs shortly after the scene enters the background, or when its session is discarded.
        // Release any resources associated with this scene that can be re-created the next time the scene connects.
        // The scene may re-connect later, as its session was not neccessarily discarded (see `application:didDiscardSceneSessions` instead).
    }

    func sceneDidBecomeActive(_ scene: UIScene) {
        // Called when the scene has moved from an inactive state to an active state.
        // Use this method to restart any tasks that were paused (or not yet started) when the scene was inactive.
    }

    func sceneWillResignActive(_ scene: UIScene) {
        // Called when the scene will move from an active state to an inactive state.
        // This may occur due to temporary interruptions (ex. an incoming phone call).
    }

    func sceneWillEnterForeground(_ scene: UIScene) {
        // Called as the scene transitions from the background to the foreground.
        // Use this method to undo the changes made on entering the background.
    }

    func sceneDidEnterBackground(_ scene: UIScene) {
        // Called as the scene transitions from the foreground to the background.
        // Use this method to save data, release shared resources, and store enough scene-specific state information
        // to restore the scene back to its current state.
    }


}


//
//  FirstViewController.swift
//  Ridenbaugh_HW1
//
//  Created by Benjamin Ridenbaugh on 9/24/19.
//  Copyright © 2019 Benjamin Ridenbaugh. All rights reserved.
//

import UIKit

class FirstViewController: UIViewController {

    @IBOutlet weak var RGB: UILabel!
    
    @IBOutlet weak var Text: UITextField!
    
    @IBOutlet weak var Button: UIButton!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        
        Text.text = "Tap to Change Color"
        
    }
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        view.endEditing(true)
        super.touchesBegan(touches, with: event)
    }

    @IBAction func ButtonAction(_ sender: Any) {
        let red = Float(arc4random_uniform(257))
        let green = Float(arc4random_uniform(257))
        let blue = Float(arc4random_uniform(257))
        
        RGB.text = "Red: \(red)\nGreen: \(green)\nBlue: \(blue)"
        
        Text.textColor = UIColor(red: CGFloat(red/256), green: CGFloat(green/256), blue: CGFloat(blue/256), alpha: 1)
    }
    
    
    
}


//
//  SecondViewController.swift
//  Ridenbaugh_HW1
//
//  Created by Benjamin Ridenbaugh on 9/24/19.
//  Copyright © 2019 Benjamin Ridenbaugh. All rights reserved.
//

import UIKit

class SecondViewController: UIViewController {

    @IBOutlet weak var Text: UITextField!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        view.endEditing(true)
        super.touchesBegan(touches, with: event)
    }

    @IBAction func deleteclk(_ sender: Any) {
        Text.deleteBackward()
    }
    
    @IBAction func enterclk(_ sender: Any) {
        
        let equal = Text.text
        
        if equal!.contains("+"){
            let equalarray = equal?.split(separator: "+")
            let num1 = Int(equalarray![0]) ?? 0
            let num2 = Int(equalarray![1]) ?? 0
            let result = num1 + num2
            Text.text = String(result)
        }
        
        if equal!.contains("-"){
            let equalarray = equal?.split(separator: "-")
            let num1 = Int(equalarray![0]) ?? 0
            let num2 = Int(equalarray![1]) ?? 0
            let result = num1 - num2
            Text.text = String(result)
        }
        
        if equal!.contains("*"){
            let equalarray = equal?.split(separator: "*")
            let num1 = Int(equalarray![0]) ?? 0
            let num2 = Int(equalarray![1]) ?? 0
            let result = num1 * num2
            Text.text = String(result)
        }
        
        if equal!.contains("/"){
            let equalarray = equal?.split(separator: "/")
            let num1 = Float(equalarray![0]) ?? 0
            let num2 = Float(equalarray![1]) ?? 0
            let result = num1 / num2
            Text.text = String(result)
        }
        
    }
    
    @IBAction func clearclk(_ sender: Any) {
        Text.text = ""
    }
    
    @IBAction func addclk(_ sender: Any) {
        Text.insertText("+")
    }
    
    @IBAction func subclk(_ sender: Any) {
        Text.insertText("-")
    }
    
    @IBAction func multclk(_ sender: Any) {
        Text.insertText("*")
    }
    
    @IBAction func divclk(_ sender: Any) {
        Text.insertText("/")
    }
    
    @IBAction func zero(_ sender: Any) {
        Text.insertText("0")
    }
    
    @IBAction func one(_ sender: Any) {
        Text.insertText("1")
    }
    
    @IBAction func two(_ sender: Any) {
        Text.insertText("2")
    }
    
    @IBAction func three(_ sender: Any) {
        Text.insertText("3")
    }
    
    @IBAction func four(_ sender: Any) {
        Text.insertText("4")
    }
    
    @IBAction func five(_ sender: Any) {
        Text.insertText("5")
    }
    
    @IBAction func six(_ sender: Any) {
        Text.insertText("6")
    }
    
    @IBAction func seven(_ sender: Any) {
        Text.insertText("7")
    }
    
    @IBAction func eight(_ sender: Any) {
        Text.insertText("8")
    }
    
    @IBAction func nine(_ sender: Any) {
        Text.insertText("9")
    }
      
}

